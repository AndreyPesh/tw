generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Category {
  id     String               @id @default(uuid())
  name   String
  slug   String
  phones CategoriesOnPhones[]
}

model CategoriesOnPhones {
  id         String   @id @default(uuid())
  phoneId    String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  phone      Phones   @relation(fields: [phoneId], references: [id])
}

model Phones {
  id             String               @id @default(uuid())
  categoryId     String               @map("category_id")
  slug           String
  price          Int
  rating         Int
  quantity       Int
  BrandsOnPhones BrandsOnPhones[]
  category       CategoriesOnPhones[]
  details        PhoneDetails?
  images         PhoneImages[]
}

model PhoneImages {
  id      String @id @default(uuid())
  url     String
  phoneId String @map("phone_id")
  phone   Phones @relation(fields: [phoneId], references: [id])

  @@map("phone_images")
}

model BrandsOnPhones {
  id      String      @id @default(uuid())
  phoneId String
  brandId String
  brand   PhoneBrands @relation(fields: [brandId], references: [id])
  phone   Phones      @relation(fields: [phoneId], references: [id])
}

model PhoneBrands {
  id             String           @id @default(uuid())
  brand          String
  BrandsOnPhones BrandsOnPhones[]
}

model PhoneDetails {
  id      String  @id @default(uuid())
  memory  Int
  os      String
  display String
  nfc     Boolean
  charge  String
  phoneId String  @unique
  phone   Phones  @relation(fields: [phoneId], references: [id])
}
